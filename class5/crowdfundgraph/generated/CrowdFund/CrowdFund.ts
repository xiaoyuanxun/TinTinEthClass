// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class FundLog extends ethereum.Event {
  get params(): FundLog__Params {
    return new FundLog__Params(this);
  }
}

export class FundLog__Params {
  _event: FundLog;

  constructor(event: FundLog) {
    this._event = event;
  }

  get fundID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get receiver(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get goal(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class bid extends ethereum.Event {
  get params(): bid__Params {
    return new bid__Params(this);
  }
}

export class bid__Params {
  _event: bid;

  constructor(event: bid) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get fundID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class CrowdFund__fundersResult {
  value0: Address;
  value1: BigInt;

  constructor(value0: Address, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getAddr(): Address {
    return this.value0;
  }

  getFundAmount(): BigInt {
    return this.value1;
  }
}

export class CrowdFund__fundTasksResult {
  value0: Address;
  value1: string;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: boolean;

  constructor(
    value0: Address,
    value1: string,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromBoolean(this.value5));
    return map;
  }

  getReceiver(): Address {
    return this.value0;
  }

  getDescription(): string {
    return this.value1;
  }

  getGoal(): BigInt {
    return this.value2;
  }

  getHaveFund(): BigInt {
    return this.value3;
  }

  getFunderNum(): BigInt {
    return this.value4;
  }

  getIsFinish(): boolean {
    return this.value5;
  }
}

export class CrowdFund extends ethereum.SmartContract {
  static bind(address: Address): CrowdFund {
    return new CrowdFund("CrowdFund", address);
  }

  newFundTask(receiver: Address, goal: BigInt, desc: string): BigInt {
    let result = super.call(
      "newFundTask",
      "newFundTask(address,uint256,string):(uint256)",
      [
        ethereum.Value.fromAddress(receiver),
        ethereum.Value.fromUnsignedBigInt(goal),
        ethereum.Value.fromString(desc)
      ]
    );

    return result[0].toBigInt();
  }

  try_newFundTask(
    receiver: Address,
    goal: BigInt,
    desc: string
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "newFundTask",
      "newFundTask(address,uint256,string):(uint256)",
      [
        ethereum.Value.fromAddress(receiver),
        ethereum.Value.fromUnsignedBigInt(goal),
        ethereum.Value.fromString(desc)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  funders(param0: BigInt, param1: BigInt): CrowdFund__fundersResult {
    let result = super.call(
      "funders",
      "funders(uint256,uint256):(address,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new CrowdFund__fundersResult(
      result[0].toAddress(),
      result[1].toBigInt()
    );
  }

  try_funders(
    param0: BigInt,
    param1: BigInt
  ): ethereum.CallResult<CrowdFund__fundersResult> {
    let result = super.tryCall(
      "funders",
      "funders(uint256,uint256):(address,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CrowdFund__fundersResult(value[0].toAddress(), value[1].toBigInt())
    );
  }

  fundTaskCount(): BigInt {
    let result = super.call("fundTaskCount", "fundTaskCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_fundTaskCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "fundTaskCount",
      "fundTaskCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  fundTasks(param0: BigInt): CrowdFund__fundTasksResult {
    let result = super.call(
      "fundTasks",
      "fundTasks(uint256):(address,string,uint256,uint256,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new CrowdFund__fundTasksResult(
      result[0].toAddress(),
      result[1].toString(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBoolean()
    );
  }

  try_fundTasks(
    param0: BigInt
  ): ethereum.CallResult<CrowdFund__fundTasksResult> {
    let result = super.tryCall(
      "fundTasks",
      "fundTasks(uint256):(address,string,uint256,uint256,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CrowdFund__fundTasksResult(
        value[0].toAddress(),
        value[1].toString(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBoolean()
      )
    );
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  participateMap(param0: BigInt, param1: Address): boolean {
    let result = super.call(
      "participateMap",
      "participateMap(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );

    return result[0].toBoolean();
  }

  try_participateMap(
    param0: BigInt,
    param1: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "participateMap",
      "participateMap(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class GetFundCall extends ethereum.Call {
  get inputs(): GetFundCall__Inputs {
    return new GetFundCall__Inputs(this);
  }

  get outputs(): GetFundCall__Outputs {
    return new GetFundCall__Outputs(this);
  }
}

export class GetFundCall__Inputs {
  _call: GetFundCall;

  constructor(call: GetFundCall) {
    this._call = call;
  }

  get taskId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class GetFundCall__Outputs {
  _call: GetFundCall;

  constructor(call: GetFundCall) {
    this._call = call;
  }
}

export class NewFundTaskCall extends ethereum.Call {
  get inputs(): NewFundTaskCall__Inputs {
    return new NewFundTaskCall__Inputs(this);
  }

  get outputs(): NewFundTaskCall__Outputs {
    return new NewFundTaskCall__Outputs(this);
  }
}

export class NewFundTaskCall__Inputs {
  _call: NewFundTaskCall;

  constructor(call: NewFundTaskCall) {
    this._call = call;
  }

  get receiver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get goal(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get desc(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class NewFundTaskCall__Outputs {
  _call: NewFundTaskCall;

  constructor(call: NewFundTaskCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class UserFundCall extends ethereum.Call {
  get inputs(): UserFundCall__Inputs {
    return new UserFundCall__Inputs(this);
  }

  get outputs(): UserFundCall__Outputs {
    return new UserFundCall__Outputs(this);
  }
}

export class UserFundCall__Inputs {
  _call: UserFundCall;

  constructor(call: UserFundCall) {
    this._call = call;
  }

  get taskId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UserFundCall__Outputs {
  _call: UserFundCall;

  constructor(call: UserFundCall) {
    this._call = call;
  }
}

export class WithdrawAllETHCall extends ethereum.Call {
  get inputs(): WithdrawAllETHCall__Inputs {
    return new WithdrawAllETHCall__Inputs(this);
  }

  get outputs(): WithdrawAllETHCall__Outputs {
    return new WithdrawAllETHCall__Outputs(this);
  }
}

export class WithdrawAllETHCall__Inputs {
  _call: WithdrawAllETHCall;

  constructor(call: WithdrawAllETHCall) {
    this._call = call;
  }
}

export class WithdrawAllETHCall__Outputs {
  _call: WithdrawAllETHCall;

  constructor(call: WithdrawAllETHCall) {
    this._call = call;
  }
}
